Metadata-Version: 2.1
Name: ontoflow
Version: 0.0.1
Summary: An enhanced workflow designer and builder
Author-email: Alessandro Calvio <alessandro.calvio@unibo.it>
Project-URL: repository, https://github.com/H2020-OpenModel/OntoFlow
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Programming Language :: Python
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: DLite-Python>=0.3.16
Requires-Dist: pybacktrip@ git+https://github.com/xAlessandroC/PyBackTrip@feature/fuseki
Requires-Dist: pint~=0.18
Provides-Extra: examples
Requires-Dist: oteapi-asmod@ git+https://github.com/EMMC-ASBL/oteapi-asmod@eb7292b ; extra == "examples"
Requires-Dist: oteapi-core==0.4.1; extra == "examples"

# OntoFlow
*An enhanced workflow designer and builder for the [OpenModel](https://github.com/H2020-OpenModel/) project*

## Architecture
---
<p align="center">
<img src="docs/images/OntoFlowHighLevel.jpg" alt="OIP High Level Architecture" width="600">
</p>

In the high-level overview of the OIP, OntoFlow is the first key component to come into play and, through its two submodules OntoFlowKB and OntoFlowDM, is responsible for storing and managing the semantic representation of the elements of interest for the individual use cases and for using decision-making and MCO techniques to choose the most suitable workflow among the possible ones.

<p align="center">
<img src="docs/images/OntoFlowArchitecture.jpg" alt="OntoFlow High Level Architecture" width="300">
</p>

**OntoFlowKB** is a triplestore-based component that stores and manages workflow-related ontological concepts and application specific ones. It also enables querying capabilities with respect to the execution of queries. The current implementation relies on the Stardog technology.

**OntoFlowDM**  is the decision-making engine for the OntoFlow architecture. Its main task consists in suggesting the best ontological route that can obtain the desired target and, at the same time, optimize the interested criteria. It:
1. Retrives all the semantic data contained in the triplestore.
2. Runs the search algorithm to navigate the ontologies and find all the possible routes producing the targeted output.
3.	Finds the best route according to predefined criteria.

The output of OntoFlow is the ontological description of a workflow that describes, as a set of concepts and relationships between them, the final process by which the output can be derived from the available ontology. This description, being ontologically defined, contains no information either about the actual data to be used or about how to perform the various functions.

## How to install
---
OntoFlow can be installed as a Python package inside your own environment. Since there is no deployment on the PyPi platform, you have too directly install it from this repository

```
pip install .
```

or add it as dependency

```
git+https://github.com/H2020-OpenModel/OntoFlow@<commit code>
```

## Examples
---
OntoFlow comes with some examples to test its functionality and see how it works. To be able to use them install its complete version

```
pip install .[examples]
```

This will install also the [PyBackTrip](https://github.com/xAlessandroC/PyBackTrip) dependency for backends support.

Examples can be found in the `examples` folder. For the moment, please, refer only to the [formula generation](https://github.com/H2020-OpenModel/OntoFlow/blob/main/examples/datamodel_generation/formula_generation.py) example.
